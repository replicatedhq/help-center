version: 2
experimental:
  notify:
    branches:
      only:
      - master

environment: &environment
  environment:
    PROJECT_NAME: help-center
    PROJECT_ORG: replicatedhq
    SRC_DIR: /tmp/src
    DST_DIR: /tmp/built
  working_directory: /tmp/src

defaults: &defaults
  <<: *environment
  docker:
    - image: circleci/node:8.9.4

defaults_eks: &defaults_eks
  docker:
  - image: replicated/gitops-builder:node8-go11
  working_directory: ~/repo
  environment: &environment_eks
    PROJECT_NAME: help-center
    ECR_REPO: 923411875752.dkr.ecr.us-east-1.amazonaws.com
    OVERLAY_PATH: kustomize/overlays/staging
    GITOPS_BRANCH: master
    DOCKERFILE: build/Dockerfile

defaults_py: &defaults_py
  <<: *environment
  docker:
    - image: circleci/python:2

setup_steps: &setup_steps
  command: |
    sudo apt-get install python-pip python-dev build-essential
    sudo npm install -g npm@3.x.x
    sudo npm install -g grunt-cli
    yarn install

hugo_setup_steps: &hugo_setup_steps
  command: |
    cd /tmp
    wget https://github.com/gohugoio/hugo/releases/download/v0.51/hugo_0.51_Linux-64bit.tar.gz
    tar xzvf hugo_0.51_Linux-64bit.tar.gz
    sudo mv hugo /usr/bin/hugo

jobs:
  build_staging:
    <<: *defaults_py
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Staging
          <<: *hugo_setup_steps
      - run:
          name: Build Staging
          command: |
            pip install awscli --upgrade --user

            rm -rf ./.git
            mkdir ${DST_DIR}
            hugo -s ${SRC_DIR} -d ${DST_DIR} --config ${SRC_DIR}/config.staging.yaml -b "https://help.staging.replicated.com/"
            # google-site-verification file is not needed on staging
            cd ..
            cp ${SRC_DIR}/build/* ./
            docker build -t ${PROJECT_NAME}:${CIRCLE_SHA1:0:7} .

            export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
            $(/home/circleci/.local/bin/aws ecr get-login --no-include-email --region us-east-1)
            docker tag ${PROJECT_NAME}:${CIRCLE_SHA1:0:7} 923411875752.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:${CIRCLE_SHA1:0:7}
            docker push 923411875752.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:${CIRCLE_SHA1:0:7}
            docker tag ${PROJECT_NAME}:${CIRCLE_SHA1:0:7} 923411875752.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:latest
            docker push 923411875752.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:latest

  build_production:
    <<: *defaults_py
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Production
          <<: *hugo_setup_steps
      - run:
          name: Build Production
          command: |
            pip install awscli --upgrade --user

            rm -rf ./.git
            mkdir ${DST_DIR}
            hugo -s ${SRC_DIR} -d ${DST_DIR} --config ${SRC_DIR}/config.prod.yaml -b "https://help.replicated.com/"
            cd ..
            cp ${SRC_DIR}/build/* ./
            mv google8b98ed0b455f3b19.html ${DST_DIR}
            docker build -t ${PROJECT_NAME}:${CIRCLE_SHA1:0:7} .

            export AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY
            $(/home/circleci/.local/bin/aws ecr get-login --no-include-email --region us-east-1)
            docker tag ${PROJECT_NAME}:${CIRCLE_SHA1:0:7} 799720048698.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:${CIRCLE_SHA1:0:7}
            docker push 799720048698.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:${CIRCLE_SHA1:0:7}
            docker tag ${PROJECT_NAME}:${CIRCLE_SHA1:0:7} 799720048698.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:latest
            docker push 799720048698.dkr.ecr.us-east-1.amazonaws.com/${PROJECT_NAME}:latest

  deploy_staging_eks:
    <<: *defaults_eks
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "25:51:68:66:6d:12:c7:84:f4:18:97:6a:7c:2e:f8:3d"
      - deploy:
          name: Maybe deploy staging to eks
          command: |
            export WORKDIR=`pwd`
            export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
            deploy

  deploy_production_eks:
    <<: *defaults_eks
    environment:
      <<: *environment_eks
      ECR_REPO: 799720048698.dkr.ecr.us-east-1.amazonaws.com
      OVERLAY_PATH: kustomize/overlays/production
      GITOPS_BRANCH: release
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "25:51:68:66:6d:12:c7:84:f4:18:97:6a:7c:2e:f8:3d"
      - deploy:
          name: Maybe deploy production to eks
          command: |
            export WORKDIR=`pwd`
            export CIRCLE_PROJECT_REPONAME=$PROJECT_NAME
            deploy

  deploy_sleep:
    docker:
      - image: alpine:3.8
    working_directory: ~/repo
    # todo we need to get `resource_class: small` enabled for our project before this will work. but its fine for now.
    resource_class: small
    steps:
      - run:
          name: sleep
          command: |
            sleep 3m

  build_staging_index:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Staging Index Build
          <<: *setup_steps
      - run:
          name: Build Staging Index
          command: |
            set -vu
            if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
              mkdir public
              make index-and-send-staging
            fi

  build_prod_index:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Prod Index Build
          <<: *setup_steps
      - run:
          name: Build Prod Index
          command: |
            set -vu
            if [ "${CIRCLE_PROJECT_USERNAME}" == "replicatedhq" ]; then
              mkdir public
              make index-and-send
            fi

workflows:
  version: 2
  build_accept_deploy:
    jobs:
      - build_staging:
          filters:
            branches:
              only: master
      - build_production:
          filters:
            branches:
              only: master
      - deploy_staging_eks:
          requires:
            - build_staging
          filters:
            branches:
              only: master
      - deploy_production_eks:
          requires:
            - build_production
          filters:
            branches:
              only: master
      - deploy_sleep:
          requires:
            - deploy_staging_eks
            - deploy_production_eks
      - build_staging_index:
          requires:
            - deploy_sleep
          filters:
            branches:
              only: master
      - build_prod_index:
          requires:
            - deploy_sleep
          filters:
            branches:
              only: master
